generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model ContactUs {
  id              String   @id @default(uuid())
  name            String
  email           String
  phone           String
  companyName     String?
  selectedPackage Package
  message         String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model Estimator {
  id                  String   @id @default(uuid())
  projectType         String?
  projectPurpose      String?
  targetAudience      String?
  features            String[]
  designPreference    String?
  needsCustomBranding Boolean?
  deliveryTimeline    String?
  budgetRange         String?
  addons              String[]
  customRequests      String?
  fullName            String
  email               String
  phone               String?
  companyName         String?
  userRole            String?
  pdfUrl              String?
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
}

model GetStarted {
  id            String   @id @default(uuid())
  name          String
  email         String
  phone         String?
  service       String
  budget        String?
  companyName   String?
  projectVision String
  createdAt     DateTime @default(now())
}

model TalkToUs {
  id          String   @id @default(uuid())
  name        String
  email       String
  phone       String?
  companyName String?
  message     String
  createdAt   DateTime @default(now())
}

model LetsTalk {
  id          String   @id @default(uuid())
  email       String
  createdAt   DateTime @default(now())
}

model ContactPage {
  id          String   @id @default(uuid())
  name        String
  email       String
  phone       String
  message     String
  createdAt   DateTime @default(now())
}

// Call Scheduling Models
model ScheduledCall {
  id              String           @id @default(uuid())
  name            String
  email           String
  phone           String
  companyName     String?
  projectBrief    String
  
  // Call Details
  scheduledDate   DateTime
  scheduledTime   String          // Format: "14:30" (24-hour format)
  timezone        String          @default("UTC")
  duration        Int             @default(30) // Duration in minutes
  meetingLink     String?         // Generated meeting link
  
  // Status and Notes
  status          CallStatus      @default(SCHEDULED)
  adminNotes      String?
  clientNotes     String?
  
  // Reminders
  reminderSent    Boolean         @default(false)
  reminderSentAt  DateTime?
  
  // Follow-up
  followUpSent    Boolean         @default(false)
  followUpSentAt  DateTime?
  
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  
  @@index([scheduledDate])
  @@index([email])
}

model CallAvailability {
  id            String      @id @default(uuid())
  dayOfWeek     Int         // 0 = Sunday, 1 = Monday, etc.
  startTime     String      // Format: "09:00"
  endTime       String      // Format: "17:00"
  timezone      String      @default("UTC")
  isActive      Boolean     @default(true)
  
  // Break times within the day
  breaks        CallBreak[]
  
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  
  @@unique([dayOfWeek, startTime, endTime])
}

model CallBreak {
  id              String           @id @default(uuid())
  startTime       String           // Format: "12:00"
  endTime         String           // Format: "13:00"
  description     String?          // e.g., "Lunch Break"
  
  availabilityId  String
  availability    CallAvailability @relation(fields: [availabilityId], references: [id], onDelete: Cascade)
  
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
}

model CallBlockedDate {
  id          String    @id @default(uuid())
  date        DateTime  // Specific date to block
  reason      String?   // e.g., "Holiday", "Conference"
  isRecurring Boolean   @default(false) // For annual holidays
  
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  @@unique([date])
}

// Blog Models
model BlogPost {
  id                String         @id @default(uuid())
  title             String
  slug              String         @unique
  excerpt           String
  content           Json           // Rich content with different blocks
  featuredImage     String?
  bannerImage       String?        // Banner image for header and cards
  author            String
  authorImage       String?
  authorBio         String?
  status            BlogStatus     @default(DRAFT)
  publishedAt       DateTime?
  readTime          Int            // in minutes
  views             Int            @default(0)
  likes             Int            @default(0)
  
  // SEO Fields
  metaTitle         String?
  metaDescription   String?
  metaKeywords      String[]
  canonicalUrl      String?
  ogImage           String?
  ogDescription     String?
  
  // Organization
  categories        BlogCategory[]
  tags              BlogTag[]
  
  // Comments
  comments          BlogComment[]
  commentsEnabled   Boolean        @default(true)
  commentsCount     Int            @default(0)
  
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
  
  @@index([slug])
  @@index([status, publishedAt])
  @@index([publishedAt])
}

model BlogComment {
  id          String            @id @default(uuid())
  content     String
  authorName  String
  authorEmail String
  authorUrl   String?
  authorIp    String?           // For spam protection
  userAgent   String?           // For spam protection
  
  // Nested structure
  parentId    String?
  parent      BlogComment?      @relation("CommentReplies", fields: [parentId], references: [id], onDelete: Cascade)
  replies     BlogComment[]     @relation("CommentReplies")
  depth       Int               @default(0) // For efficient querying
  
  // Post relationship
  postId      String
  post        BlogPost          @relation(fields: [postId], references: [id], onDelete: Cascade)
  
  // Voting system
  upvotes     Int               @default(0)
  downvotes   Int               @default(0)
  score       Int               @default(0) // upvotes - downvotes
  votes       CommentVote[]
  
  // Moderation
  status      CommentStatus     @default(PENDING)
  isSpam      Boolean           @default(false)
  isPinned    Boolean           @default(false)
  reports     CommentReport[]
  moderationLogs CommentModerationLog[]
  
  // Metadata
  editedAt    DateTime?
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  
  @@index([postId, status, createdAt])
  @@index([parentId])
  @@index([score])
  @@index([status])
}

model CommentVote {
  id        String      @id @default(uuid())
  type      VoteType
  
  // User identification (using email + IP for anonymous users)
  voterEmail String?
  voterIp    String
  
  // Comment relationship
  commentId String
  comment   BlogComment @relation(fields: [commentId], references: [id], onDelete: Cascade)
  
  createdAt DateTime    @default(now())
  
  @@unique([commentId, voterEmail, voterIp])
  @@index([commentId])
}

model CommentReport {
  id        String         @id @default(uuid())
  reason    ReportReason
  details   String?
  
  // Reporter identification
  reporterEmail String?
  reporterIp    String
  
  // Comment relationship
  commentId String
  comment   BlogComment    @relation(fields: [commentId], references: [id], onDelete: Cascade)
  
  // Moderation
  status    ReportStatus   @default(PENDING)
  reviewedBy String?
  reviewedAt DateTime?
  
  createdAt DateTime       @default(now())
  
  @@index([commentId])
  @@index([status])
}

model CommentModerationLog {
  id          String              @id @default(uuid())
  action      ModerationAction
  reason      String?
  moderator   String              // Admin/moderator identifier
  
  // Comment relationship
  commentId   String
  comment     BlogComment         @relation(fields: [commentId], references: [id], onDelete: Cascade)
  
  // Previous state (for undo functionality)
  previousStatus CommentStatus?
  
  createdAt   DateTime            @default(now())
  
  @@index([commentId])
  @@index([moderator])
}

model BlogCategory {
  id          String     @id @default(uuid())
  name        String     @unique
  slug        String     @unique
  description String?
  color       String?    // Hex color for UI
  icon        String?    // Icon name or emoji
  posts       BlogPost[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  
  @@index([slug])
}

model BlogTag {
  id          String     @id @default(uuid())
  name        String     @unique
  slug        String     @unique
  color       String?    // Hex color for UI
  posts       BlogPost[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  
  @@index([slug])
}

enum BlogStatus {
  DRAFT
  PUBLISHED
  SCHEDULED
  ARCHIVED
}

enum Package {
  STARTER
  GROWTH
  PRO
  ENTERPRISE
}

enum CommentStatus {
  PENDING     // Awaiting moderation
  APPROVED    // Visible to public
  REJECTED    // Hidden from public
  SPAM        // Marked as spam
  DELETED     // Soft deleted
}

enum VoteType {
  UPVOTE
  DOWNVOTE
}

enum ReportReason {
  SPAM
  HARASSMENT
  HATE_SPEECH
  INAPPROPRIATE_CONTENT
  OFF_TOPIC
  COPYRIGHT
  OTHER
}

enum ReportStatus {
  PENDING
  REVIEWED
  DISMISSED
  ACTIONED
}

enum ModerationAction {
  APPROVE
  REJECT
  MARK_SPAM
  DELETE
  PIN
  UNPIN
  EDIT
  BAN_USER
}

enum CallStatus {
  SCHEDULED
  CONFIRMED
  IN_PROGRESS
  COMPLETED
  CANCELLED
  NO_SHOW
  RESCHEDULED
}
