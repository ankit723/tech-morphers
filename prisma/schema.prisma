generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum UserRole {
  ADMIN
  DEVELOPER
  DESIGNER
  MARKETING
}

model User {
  id String @id @default(uuid())
  name String
  email String @unique
  password String
  role UserRole
  isActive Boolean @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Project assignments (legacy - keep for backward compatibility)
  assignedProjects Estimator[] @relation("AssignedUser")
  
  // New many-to-many project assignments
  projectAssignments ProjectAssignment[]
}

model ContactUs {
  id              String   @id @default(uuid())
  name            String
  email           String
  phone           String
  companyName     String?
  selectedPackage Package
  message         String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model Estimator {
  id                  String   @id @default(uuid())
  projectType         String?
  projectPurpose      String?
  targetAudience      String?
  features            String[]
  designPreference    String?
  needsCustomBranding Boolean?
  deliveryTimeline    String?
  budgetRange         String?
  addons              String[]
  customRequests      String?
  fullName            String
  email               String
  phone               String?
  companyName         String?
  userRole            String?
  pdfUrl              String?
  
  // Client conversion
  isConverted         Boolean  @default(false)
  convertedAt         DateTime?
  clientId            String?
  client              Client?  @relation(fields: [clientId], references: [id])
  
  // Project management fields
  projectStatus       ProjectStatus @default(JUST_STARTED)
  projectCost         Decimal? @db.Decimal(10,2)
  currency            String? @default("USD")
  
  // Legacy single user assignment (keep for backward compatibility)
  assignedUserId      String?
  assignedUser        User?    @relation("AssignedUser", fields: [assignedUserId], references: [id])
  
  // New many-to-many project assignments
  projectAssignments  ProjectAssignment[]
  
  // Document relations
  documents           ClientDocument[]
  deliverables        ProjectDeliverable[]
  
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
}

model GetStarted {
  id            String   @id @default(uuid())
  name          String
  email         String
  phone         String?
  service       String
  budget        String?
  companyName   String?
  projectVision String
  createdAt     DateTime @default(now())
}

model TalkToUs {
  id          String   @id @default(uuid())
  name        String
  email       String
  phone       String?
  companyName String?
  message     String
  createdAt   DateTime @default(now())
}

model LetsTalk {
  id          String   @id @default(uuid())
  email       String
  createdAt   DateTime @default(now())
}

model ContactPage {
  id          String   @id @default(uuid())
  name        String
  email       String
  phone       String
  message     String
  createdAt   DateTime @default(now())
}

// Client Management Models
model Client {
  id              String   @id @default(uuid())
  email           String   @unique
  password        String   // Hashed password
  fullName        String
  companyName     String?
  phone           String?
  
  // System generated password for admin reference
  systemPassword  String
  hasChangedPassword Boolean @default(false)
  
  // Login tracking
  lastLoginAt     DateTime?
  
  // Relations
  estimators      Estimator[]
  documents       ClientDocument[]
  paymentRecords  PaymentRecord[]
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  @@index([email])
}

model ClientDocument {
  id          String      @id @default(uuid())
  clientId    String
  client      Client      @relation(fields: [clientId], references: [id], onDelete: Cascade)
  
  // Project/Estimator relation (optional)
  estimatorId String?
  estimator   Estimator?  @relation(fields: [estimatorId], references: [id], onDelete: SetNull)
  
  // Document details
  title       String
  description String?
  type        DocumentType
  fileUrl     String
  fileName    String
  fileSize    Int         // in bytes
  
  // Upload info
  uploadedBy  String      // Admin who uploaded
  uploadedAt  DateTime    @default(now())
  
  // Signing functionality (except for invoices)
  requiresSignature Boolean @default(false)
  isSigned         Boolean @default(false)
  signedAt         DateTime?
  signedBy         String? // Client name who signed
  signatureData    String? // Base64 signature or signature metadata
  
  // Invoice-specific fields
  invoiceNumber    String? // For invoices only
  invoiceAmount    Decimal? @db.Decimal(10,2) // For invoices only
  currency         String? @default("USD") // For invoices only
  dueDate          DateTime? // For invoices only
  
  // Payment tracking (for invoices)
  paymentStatus    PaymentStatus @default(PENDING)
  paidAt           DateTime?
  paymentProof     String? // URL to payment screenshot
  transactionId    String? // Client provided transaction ID
  paymentMethod    String? // UPI, Bank Transfer, etc.
  paymentNotes     String? // Additional payment notes
  
  // Admin verification for payments
  paymentVerified  Boolean @default(false)
  verifiedBy       String? // Admin who verified payment
  verifiedAt       DateTime?
  verificationNotes String?
  
  // Relations
  paymentRecords   PaymentRecord[]
  
  @@index([clientId])
  @@index([type])
  @@index([paymentStatus])
  @@index([invoiceNumber])
}

// New model for payment records and accounting
model PaymentRecord {
  id              String        @id @default(uuid())
  
  // Document reference
  documentId      String
  document        ClientDocument @relation(fields: [documentId], references: [id], onDelete: Cascade)
  
  // Client info
  clientId        String
  client          Client        @relation(fields: [clientId], references: [id])
  
  // Payment details
  amount          Decimal       @db.Decimal(10,2)
  currency        String        @default("USD")
  paymentMethod   String        // UPI, Bank Transfer, Cash, Card, etc.
  transactionId   String?
  
  // Payment proof
  proofImageUrl   String?       // Screenshot of payment
  proofFileName   String?
  
  // Status and verification
  status          PaymentStatus @default(PENDING)
  verifiedBy      String?       // Admin who verified
  verifiedAt      DateTime?
  
  // Accounting
  accountingNotes String?
  category        String?       // Project Payment, Maintenance, etc.
  fiscalYear      String?
  taxAmount       Decimal?      @db.Decimal(10,2)
  
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  
  @@index([clientId])
  @@index([status])
  @@index([createdAt])
}

// Bank details for admin (for invoice generation)
model BankDetails {
  id                String   @id @default(uuid())
  
  // Bank information
  bankName          String
  accountHolderName String
  accountNumber     String
  ifscCode          String
  branchName        String
  
  // Digital payment
  upiId             String?
  
  // Status flags
  isActive          Boolean  @default(true)
  isDefault         Boolean  @default(false)
  
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  @@index([isActive, isDefault])
}

// Invoice template settings
model InvoiceSettings {
  id              String   @id @default(uuid())
  
  // Company details for invoices
  companyName     String
  companyAddress  String
  companyEmail    String
  companyPhone    String
  companyWebsite  String?
  taxNumber       String?
  
  // Invoice configuration
  invoicePrefix   String   @default("INV")
  currentNumber   Int      @default(1000)
  taxRate         Float    @default(18.0) // Default tax rate percentage
  defaultDueDays  Int      @default(30)   // Default due date in days
  
  // Default terms and text
  paymentTerms    String?
  footerText      String?
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model Admin {
  id          String   @id @default(uuid())
  email       String   @unique
  password    String   // Hashed password
  name        String
  role        AdminRole @default(ADMIN)
  isActive    Boolean  @default(true)
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  lastLoginAt DateTime?
  
  @@index([email])
}

// Call Scheduling Models
model ScheduledCall {
  id              String           @id @default(uuid())
  name            String
  email           String
  phone           String
  companyName     String?
  projectBrief    String
  
  // Call Details
  scheduledDate   DateTime
  scheduledTime   String          // Format: "14:30" (24-hour format)
  timezone        String          @default("UTC")
  duration        Int             @default(30) // Duration in minutes
  meetingLink     String?         // Generated meeting link
  
  // Status and Notes
  status          CallStatus      @default(SCHEDULED)
  adminNotes      String?
  clientNotes     String?
  
  // Reminders
  reminderSent    Boolean         @default(false)
  reminderSentAt  DateTime?
  
  // Follow-up
  followUpSent    Boolean         @default(false)
  followUpSentAt  DateTime?
  
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  
  @@index([scheduledDate])
  @@index([email])
}

model CallAvailability {
  id            String      @id @default(uuid())
  dayOfWeek     Int         // 0 = Sunday, 1 = Monday, etc.
  startTime     String      // Format: "09:00"
  endTime       String      // Format: "17:00"
  timezone      String      @default("UTC")
  isActive      Boolean     @default(true)
  
  // Break times within the day
  breaks        CallBreak[]
  
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  
  @@unique([dayOfWeek, startTime, endTime])
}

model CallBreak {
  id              String           @id @default(uuid())
  startTime       String           // Format: "12:00"
  endTime         String           // Format: "13:00"
  description     String?          // e.g., "Lunch Break"
  
  availabilityId  String
  availability    CallAvailability @relation(fields: [availabilityId], references: [id], onDelete: Cascade)
  
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
}

model CallBlockedDate {
  id          String    @id @default(uuid())
  date        DateTime  // Specific date to block
  reason      String?   // e.g., "Holiday", "Conference"
  isRecurring Boolean   @default(false) // For annual holidays
  
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  @@unique([date])
}

// Blog Models
model BlogPost {
  id                String         @id @default(uuid())
  title             String
  slug              String         @unique
  excerpt           String
  content           Json           // Rich content with different blocks
  featuredImage     String?
  bannerImage       String?        // Banner image for header and cards
  author            String
  authorImage       String?
  authorBio         String?
  status            BlogStatus     @default(DRAFT)
  publishedAt       DateTime?
  readTime          Int            // in minutes
  views             Int            @default(0)
  likes             Int            @default(0)
  
  // SEO Fields
  metaTitle         String?
  metaDescription   String?
  metaKeywords      String[]
  canonicalUrl      String?
  ogImage           String?
  ogDescription     String?
  
  // Organization
  categories        BlogCategory[]
  tags              BlogTag[]
  
  // Comments
  comments          BlogComment[]
  commentsEnabled   Boolean        @default(true)
  commentsCount     Int            @default(0)
  
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
  
  @@index([slug])
  @@index([status, publishedAt])
  @@index([publishedAt])
}

model BlogComment {
  id          String            @id @default(uuid())
  content     String
  authorName  String
  authorEmail String
  authorUrl   String?
  authorIp    String?           // For spam protection
  userAgent   String?           // For spam protection
  
  // Nested structure
  parentId    String?
  parent      BlogComment?      @relation("CommentReplies", fields: [parentId], references: [id], onDelete: Cascade)
  replies     BlogComment[]     @relation("CommentReplies")
  depth       Int               @default(0) // For efficient querying
  
  // Post relationship
  postId      String
  post        BlogPost          @relation(fields: [postId], references: [id], onDelete: Cascade)
  
  // Voting system
  upvotes     Int               @default(0)
  downvotes   Int               @default(0)
  score       Int               @default(0) // upvotes - downvotes
  votes       CommentVote[]
  
  // Moderation
  status      CommentStatus     @default(PENDING)
  isSpam      Boolean           @default(false)
  isPinned    Boolean           @default(false)
  reports     CommentReport[]
  moderationLogs CommentModerationLog[]
  
  // Metadata
  editedAt    DateTime?
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  
  @@index([postId, status, createdAt])
  @@index([parentId])
  @@index([score])
  @@index([status])
}

model CommentVote {
  id        String      @id @default(uuid())
  type      VoteType
  
  // User identification (using email + IP for anonymous users)
  voterEmail String?
  voterIp    String
  
  // Comment relationship
  commentId String
  comment   BlogComment @relation(fields: [commentId], references: [id], onDelete: Cascade)
  
  createdAt DateTime    @default(now())
  
  @@unique([commentId, voterEmail, voterIp])
  @@index([commentId])
}

model CommentReport {
  id        String         @id @default(uuid())
  reason    ReportReason
  details   String?
  
  // Reporter identification
  reporterEmail String?
  reporterIp    String
  
  // Comment relationship
  commentId String
  comment   BlogComment    @relation(fields: [commentId], references: [id], onDelete: Cascade)
  
  // Moderation
  status    ReportStatus   @default(PENDING)
  reviewedBy String?
  reviewedAt DateTime?
  
  createdAt DateTime       @default(now())
  
  @@index([commentId])
  @@index([status])
}

model CommentModerationLog {
  id          String              @id @default(uuid())
  action      ModerationAction
  reason      String?
  moderator   String              // Admin/moderator identifier
  
  // Comment relationship
  commentId   String
  comment     BlogComment         @relation(fields: [commentId], references: [id], onDelete: Cascade)
  
  // Previous state (for undo functionality)
  previousStatus CommentStatus?
  
  createdAt   DateTime            @default(now())
  
  @@index([commentId])
  @@index([moderator])
}

model BlogCategory {
  id          String     @id @default(uuid())
  name        String     @unique
  slug        String     @unique
  description String?
  color       String?    // Hex color for UI
  icon        String?    // Icon name or emoji
  posts       BlogPost[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  
  @@index([slug])
}

model BlogTag {
  id          String     @id @default(uuid())
  name        String     @unique
  slug        String     @unique
  color       String?    // Hex color for UI
  posts       BlogPost[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  
  @@index([slug])
}

enum BlogStatus {
  DRAFT
  PUBLISHED
  SCHEDULED
  ARCHIVED
}

enum Package {
  STARTER
  GROWTH
  PRO
  ENTERPRISE
}

enum CommentStatus {
  PENDING     // Awaiting moderation
  APPROVED    // Visible to public
  REJECTED    // Hidden from public
  SPAM        // Marked as spam
  DELETED     // Soft deleted
}

enum VoteType {
  UPVOTE
  DOWNVOTE
}

enum ReportReason {
  SPAM
  HARASSMENT
  HATE_SPEECH
  INAPPROPRIATE_CONTENT
  OFF_TOPIC
  COPYRIGHT
  OTHER
}

enum ReportStatus {
  PENDING
  REVIEWED
  DISMISSED
  ACTIONED
}

enum ModerationAction {
  APPROVE
  REJECT
  MARK_SPAM
  DELETE
  PIN
  UNPIN
  EDIT
  BAN_USER
}

enum CallStatus {
  SCHEDULED
  CONFIRMED
  IN_PROGRESS
  COMPLETED
  CANCELLED
  NO_SHOW
  RESCHEDULED
}

enum DocumentType {
  SPECIFICATION
  CONTRACT
  INVOICE
  PROPOSAL
  REPORT
  OTHER
}

enum AdminRole {
  SUPER_ADMIN
  ADMIN
  MODERATOR
}

enum PaymentStatus {
  PENDING
  SUBMITTED
  VERIFIED
  PAID
  FAILED
  DISPUTED
  REFUNDED
}

// Project Deliverables Model
model ProjectDeliverable {
  id          String      @id @default(uuid())
  projectId   String
  project     Estimator   @relation(fields: [projectId], references: [id], onDelete: Cascade)
  
  // File details
  fileName    String
  originalName String
  fileUrl     String
  fileSize    Int         // in bytes
  
  // Upload info
  uploadedBy  String      // Admin who uploaded
  uploadedAt  DateTime    @default(now())
  
  // Client signature for delivery confirmation
  isDelivered           Boolean @default(false)
  deliveredAt           DateTime?
  clientSignature       String? // Digital confirmation by client
  clientSignedAt        DateTime?
  signatureIpAddress    String?
  
  @@index([projectId])
  @@index([isDelivered])
}

enum ProjectStatus {
  JUST_STARTED
  TEN_PERCENT
  THIRTY_PERCENT
  FIFTY_PERCENT
  SEVENTY_PERCENT
  ALMOST_COMPLETED
  COMPLETED
}

// New model for project assignments with work descriptions
model ProjectAssignment {
  id          String   @id @default(uuid())
  
  // Relations
  projectId   String
  project     Estimator @relation(fields: [projectId], references: [id], onDelete: Cascade)
  
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Assignment details
  workDescription String? // What the user is working on
  role            String? // Role in this specific project (e.g., "Lead Developer", "UI Designer")
  priority        AssignmentPriority @default(MEDIUM)
  status          AssignmentStatus @default(ACTIVE)
  
  // Progress tracking
  hoursEstimated  Int?
  hoursWorked     Int? @default(0)
  progressNotes   String?
  lastUpdated     DateTime @default(now())
  
  // Assignment metadata
  assignedBy      String? // Admin who made the assignment
  assignedAt      DateTime @default(now())
  completedAt     DateTime?
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  @@unique([projectId, userId])
  @@index([projectId])
  @@index([userId])
  @@index([status])
}

enum AssignmentPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum AssignmentStatus {
  ACTIVE
  PAUSED
  COMPLETED
  CANCELLED
}
